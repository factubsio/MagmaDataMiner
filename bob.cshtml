@using Microsoft.AspNetCore.Components
@using RazorLight
@using MagmaDataMiner
@inherits TemplatePage<AbilitiesModel>

<head>
	<link rel="stylesheet" href="stuff.css">
</head>


<body>
	<div class="nav-selectors">
		<div class="page-selectors">
			<span class="page-selector generic-selector" data-page="bindings">Bindings</span>
			<span class="page-selector generic-selector" data-page="equip">Equipment</span>
			<span class="page-selector generic-selector" data-page="enemies">Enemies</span>
			<span class="page-selector generic-selector" data-page="other">Misc (?)</span>
		</div>

		<div class="sub-selectors" style="display:none" data-page="bindings">
			@foreach (var source in @Model.Sources)
			{
				<span class="bindings-selector generic-selector" data-bindings="@source.Source">
					@source.Source
				</span>
			}
		</div>
		<div class="sub-selectors" style="display:none" data-page="equip">
			@foreach (var category in @Model.Equipment)
			{
				<span class="equip-selector generic-selector" data-equip="@category.Name">
					@category.Name
				</span>
			}
		</div>
		<div class="sub-selectors" style="display:none" data-page="other">
			<span class="other-selector generic-selector" data-other="banes">
				Book Challenges
			</span>
			<span class="other-selector generic-selector" data-other="run-mutators">
				Run Mutators
			</span>
		</div>
	</div>

	<div class="content-root">
		<div class="page-container" style="display:none" data-page="bindings">

			@foreach (var source in @Model.Sources)
			{
				<div class="bindings-container" style="display: none" data-bindings="@source.Source">
					<div class="generic-container">
						<h2 class="ability-source">@source.Source</h2>
						@foreach (var ability in source.Abilities)
						{
							<div class="generic-box generic-container">
								<h3>@ability.Name</h3>
								<h4>@Raw(ability.Description)</h4>
								<table class="augment-table">
									<tr>
										<th width="100px">Name</th>
										<th width="100">Description</th>
										<th width="100px">Rarity</th>
										<th width="100px">Unique</th>
									</tr>
									@foreach (var augment in ability.Augments)
									{
										<tr>
											<td width="100px">@augment.Name</td>
											<td width="100">@Raw(augment.Description)</td>
											<td width="100px">@augment.Rarity</td>
											<td width="100px">@augment.Unique</td>
										</tr>
									}
								</table>
								<div class="ascensions-container">
									@foreach (var ascension in ability.Ascensions)
									{
										<div>
											<span class="ascension-name">@ascension.Name</span>
											<span class="ascension-description">@Raw(ascension.Description)</span>
										</div>
									}
								</div>
							</div>

						}
					</div>
				</div>
			}
		</div>
		<div class="page-container" style="display:none" data-page="equip">
			@foreach (var category in @Model.Equipment)
			{
				<div class="equip-container" style="display: none" data-equip="@category.Name">

					<table class="vestige-table">
						<tr>
							<th width="100px">Name</th>
							<th width="100">Description</th>
							<th width="100px">Rarity</th>
							<th width="100px">bob</th>
						</tr>
						@foreach (var item in category.All)
						{
							<tr>
								<td width="100px">@item.Name</td>
								<td width="100">@Raw(item.Description)</td>
								<td width="100px">@item.Rarity</td>
								<td width="100px">@item.Bob</td>
							</tr>
						}
					</table>
				</div>

			}

		</div>
		<div class="page-container" style="display:none" data-page="enemies">
			@foreach (var enemy in @Model.Enemies)
			{
				<div class="enemy-container">
					<h4>@enemy.Name</h4>

					@if (!enemy.SpawnAction.IsEmpty)
					{
						<div class="enemy-phase">
							<b>On Spawn:</b>
							<div class="enemy-state">
								@foreach (var block in enemy.SpawnAction.Blocks)
								{
									<div class="enemy-block">
										@foreach (var action in block.Candidates)
										{
											<div class="enemy-action">
												<span style="display: block;">@action.Name</span>
												<p>@action.Description</p>
											</div>
										}
									</div>
								}
							</div>
						</div>
					}


					@for (int p = 0; p < enemy.Phases.Count; p++)
					{
						var phase = enemy.Phases[p];

						<div class="enemy-phase">
							@if (enemy.Phases.Count > 1)
							{
								<b class="phase-title">Phase @p</b>
							}
							@foreach (var state in phase.States)
							{
								<b class="enemy-state-title">@state.Name</b>
								<div class="enemy-state">
									@foreach (var block in state.Blocks)
									{
										<div class="enemy-block">
											@foreach (var action in block.Candidates)
											{
												<div class="enemy-action">
													<span style="display: block;">@action.Name</span>
													<p>@action.Description</p>
												</div>
											}
										</div>
									}
								</div>

							}
						</div>

					}

					@*					<table class="vestige-table">
				<tr>
				<th width="100px">Name</th>
				<th width="100">Description</th>
				<th width="100px">Rarity</th>
				<th width="100px">bob</th>
				</tr>
				@foreach (var item in category.All)
				{
				<tr>
				<td width="100px">@item.Name</td>
				<td width="100">@Raw(item.Description)</td>
				<td width="100px">@item.Rarity</td>
				<td width="100p">@item.Bob</td>
				</tr>
				}
				</table>
				*@
				</div>

			}
		</div>
	</div>
	<div class="page-container" style="display:none" data-page="other">

		<div class="other-container" style="display: none" data-other="banes">
			<table class="vestige-table">
				<tr>
					<th width="100px">Name</th>
					<th width="100">Description</th>
					<th width="100px">Rewards</th>
				</tr>
				@foreach (var bane in Model.Banes.Where(x => !x.IsRunMutator))
				{
					<tr>
						<td width="100px">@Raw(@bane.Name)</td>
						<td width="100">@Raw(bane.Description)</td>
						<td width="100px">@bane.Reward</td>
					</tr>
				}
			</table>
		</div>

		<div class="other-container" style="display: none" data-other="run-mutators">
			<table class="vestige-table">
				<tr>
					<th width="100px">Name</th>
					<th width="100">Description</th>
				</tr>
				@foreach (var bane in Model.Banes.Where(x => x.IsRunMutator))
				{
					<tr>
						<td width="100px">@Raw(@bane.Name)</td>
						<td width="100">@Raw(bane.Description)</td>
					</tr>
				}
			</table>
		</div>
	</div>

	<script>
		const curr = new URLSearchParams(window.location.search);

		const navState = {
			page: curr.get("page"),
			section: curr.get("section"),
			activeOnPage: new Map(),
		};

		console.log(navState);

		function createSelector(type, nav, initial, defaults) {
			const selectors = document.getElementsByClassName(`${type}-selector`);
			const views = new Map();
			const navViews = new Map();

			if (defaults) {
				if (defaults.page === type) {
					initial = defaults.section;
				}
			}

			const dataElem = `data-${type}`;

			for (const view of document.getElementsByClassName(`${type}-container`)) {
				views.set(view.getAttribute(dataElem), view);
			}

			if (nav) {
				for (const navView of document.getElementsByClassName(`sub-selectors`)) {
					navViews.set(navView.getAttribute(dataElem), navView);
				}
			}

			let currentView = null;
			let currentNavView = null;

			for (const button of selectors) {
				const buttonId = button.getAttribute(dataElem);
				const view = views.get(buttonId);
				const navView = navViews.get(buttonId);

				function selectThis(updateNavState) {
					button.classList.add("generic-selected");
					view.style.display = 'block';

					if (nav && navView) {
						navView.style.display = 'block';
					}

					currentView = view;
					if (nav) {
						currentNavView = navView;
					}

					if (!nav) {
						navState.activeOnPage.set(type, buttonId);
					}

					if (updateNavState) {
						if (nav) {
							navState.page = buttonId;
							navState.section = navState.activeOnPage.get(buttonId);
						} else {
							navState.section = buttonId;
						}

						const url = new URL(window.location);
						url.searchParams.set("page", navState.page);
						url.searchParams.set("section", navState.section);
						window.history.pushState({}, "", url);

					}

				}

				button.addEventListener('click', e => {

					if (button.classList.contains("generic-selected")) {
						return;
					}

					for (const other of selectors) {
						if (other != button) {
							other.classList.remove("generic-selected");
						}
					}

					if (currentView) {
						currentView.style.display = 'none';
					}
					if (nav && currentNavView) {
						currentNavView.style.display = 'none';
					}

					selectThis(true);

				});

				if (buttonId == initial) {
					selectThis(false);
				}
			}

		}

		createSelector('page', true, navState.page || 'bindings');

		createSelector('bindings', false, 'Magma Miner', navState);
		createSelector('equip', false, 'Vestiges', navState);
		createSelector('other', false, 'banes', navState);

	</script>
</body>


